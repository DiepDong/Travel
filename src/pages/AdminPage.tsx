import { Layout, Menu, Card, Button, Table, Space, Tag, Modal, Form, Input, Select, Upload, message, Popconfirm, Typography, Row, Col, Divider, UploadProps, TimePicker } from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined, EyeOutlined, UploadOutlined, SaveOutlined, CloseOutlined, DownloadOutlined, ImportOutlined, MinusCircleOutlined, ReloadOutlined, FileTextOutlined } from '@ant-design/icons';
import { useState, useEffect } from 'react';
import { tours, TourItem, ItineraryItem, ItineraryEntry } from '../data/tours';
import { TourDataManager } from '../data/TourDataManager';
import { useTours } from '../contexts/TourContext';
import dayjs from 'dayjs';

const { Header, Content, Sider } = Layout;
const { Title, Text } = Typography;
const { TextArea } = Input;
const { Option } = Select;

export default function AdminPage() {
  const { tours: toursData, addTour, updateTour, deleteTour, refreshTours, forceRefresh } = useTours();
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingTour, setEditingTour] = useState<TourItem | null>(null);
  const [form] = Form.useForm();

  const columns = [
    {
      title: 'H√¨nh ·∫£nh',
      dataIndex: 'image',
      key: 'image',
      width: 100,
      render: (image: string) => (
        <img 
          src={image} 
          alt="Tour" 
          style={{ width: 60, height: 40, objectFit: 'cover', borderRadius: 4 }}
        />
      ),
    },
    {
      title: 'T√™n tour',
      dataIndex: 'title',
      key: 'title',
      render: (text: string) => <Text strong>{text}</Text>,
    },
    {
      title: 'Khu v·ª±c',
      dataIndex: 'region',
      key: 'region',
      render: (region: string) => {
        const regionMap: { [key: string]: string } = {
          'BinhDinh': 'B√¨nh ƒê·ªãnh',
          'MienTrungTayNguyen': 'Mi·ªÅn Trung & T√¢y Nguy√™n',
          'MienNam': 'Mi·ªÅn Nam',
          'MienBac': 'Mi·ªÅn B·∫Øc'
        };
        return <Tag color="blue">{regionMap[region] || region}</Tag>;
      },
    },
    {
      title: 'Gi√°',
      dataIndex: 'price',
      key: 'price',
      render: (price: string) => price || 'Li√™n h·ªá',
    },
    {
      title: 'Th·ªùi gian',
      dataIndex: 'duration',
      key: 'duration',
    },
    {
      title: 'C·∫≠p nh·∫≠t',
      dataIndex: 'updatedAt',
      key: 'updatedAt',
      render: (date: string) => new Date(date).toLocaleDateString('vi-VN'),
    },
    {
      title: 'Thao t√°c',
      key: 'action',
      render: (_: any, record: TourItem) => (
        <Space size="small">
          <Button 
            type="primary" 
            size="small" 
            icon={<EyeOutlined />}
            onClick={() => window.open(`/tour/${record.slug}`, '_blank')}
          >
            Xem
          </Button>
          <Button 
            type="default" 
            size="small" 
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          >
            S·ª≠a
          </Button>
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a tour n√†y?"
            onConfirm={() => handleDelete(record.id)}
            okText="X√≥a"
            cancelText="H·ªßy"
          >
            <Button 
              type="primary" 
              danger 
              size="small" 
              icon={<DeleteOutlined />}
            >
              X√≥a
            </Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  const handleAdd = () => {
    setEditingTour(null);
    form.resetFields();
    setIsModalVisible(true);
  };

  const handleEdit = (tour: TourItem) => {
    setEditingTour(tour);
    form.setFieldsValue({
      ...tour,
      itinerary: tour.itinerary.map((raw: ItineraryEntry) => {
        if (typeof raw === 'string') {
          return {
            activity: raw,
            images: '',
            time: undefined
          };
        }
        return {
          ...raw,
          images: raw.images?.join('\n') || '',
          time: raw.time ? dayjs(raw.time, 'HH:mm') : undefined
        };
      }), // Normalize legacy string items; convert images array to string and time to dayjs
      includedServices: tour.includedServices.join('\n'),
      excludedServices: tour.excludedServices.join('\n'),
      policies: tour.policies.join('\n'),
      gallery: tour.gallery?.join('\n') || ''
    });
    setIsModalVisible(true);
  };

  const handleDelete = (id: string) => {
    console.log('AdminPage - Deleting tour with id:', id);
    deleteTour(id);
    message.success('X√≥a tour th√†nh c√¥ng!');
    // Don't force refresh - let the context handle the update
  };

  const handleSave = async () => {
    try {
      const values = await form.validateFields();
      
      const tourData: TourItem = {
        id: editingTour?.id || Date.now().toString(),
        slug: values.slug,
        title: values.title,
        region: values.region,
        image: values.image,
        price: values.price,
        duration: values.duration,
        transport: values.transport,
        summary: '', // Empty summary since we removed the field
        itinerary: values.itinerary ? values.itinerary.map((item: any) => ({
          ...item,
          images: item.images ? item.images.split('\n').filter((img: string) => img.trim()) : [],
          time: item.time ? item.time.format('HH:mm') : item.time
        })) : [], // Process images from string to array and time from dayjs to string
        includedServices: values.includedServices.split('\n').filter((item: string) => item.trim()),
        excludedServices: values.excludedServices.split('\n').filter((item: string) => item.trim()),
        policies: values.policies.split('\n').filter((item: string) => item.trim()),
        gallery: values.gallery ? values.gallery.split('\n').filter((item: string) => item.trim()) : [],
        createdAt: editingTour?.createdAt || new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      if (editingTour) {
        updateTour(tourData);
        message.success('C·∫≠p nh·∫≠t tour th√†nh c√¥ng!');
      } else {
        addTour(tourData);
        message.success('Th√™m tour m·ªõi th√†nh c√¥ng!');
      }

      setIsModalVisible(false);
      form.resetFields();
    } catch (error) {
      console.error('Validation failed:', error);
    }
  };

  const handleExport = () => {
    const data = TourDataManager.exportTours();
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'tours-backup.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    message.success('Xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!');
  };

  const handleImport = (file: File) => {
    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result as string;
      if (TourDataManager.importTours(content)) {
        refreshTours(); // Refresh tours from context
        message.success('Nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng!');
      } else {
        message.error('File kh√¥ng h·ª£p l·ªá!');
      }
    };
    reader.readAsText(file);
  };

  const uploadProps: UploadProps = {
    beforeUpload: (file) => {
      handleImport(file);
      return false; // Prevent upload
    },
    showUploadList: false,
  };

  const menuItems = [
    {
      key: 'tours',
      label: 'Qu·∫£n l√Ω Tour',
    },
    {
      key: 'settings',
      label: 'C√†i ƒë·∫∑t',
    },
  ];

  return (
    <Layout style={{ minHeight: '100vh' }}>
      <Sider width={250} style={{ background: '#fff' }}>
        <div style={{ padding: '16px', borderBottom: '1px solid #f0f0f0' }}>
          <Title level={4} style={{ margin: 0, color: '#1890ff' }}>
            üõ†Ô∏è Admin Panel
          </Title>
        </div>
        <Menu
          mode="inline"
          defaultSelectedKeys={['tours']}
          items={menuItems}
          style={{ border: 'none' }}
        />
      </Sider>
      
      <Layout>
        <Header style={{ background: '#fff', padding: '0 24px', borderBottom: '1px solid #f0f0f0' }}>
          <Row justify="space-between" align="middle">
            <Col>
              <Title level={3} style={{ margin: 0 }}>
                Qu·∫£n l√Ω Tour
              </Title>
            </Col>
            <Col>
              <Space>
                <Button 
                  icon={<DownloadOutlined />}
                  onClick={handleExport}
                  size="large"
                >
                  Xu·∫•t d·ªØ li·ªáu
                </Button>
                <Upload {...uploadProps}>
                  <Button 
                    icon={<ImportOutlined />}
                    size="large"
                  >
                    Nh·∫≠p d·ªØ li·ªáu
                  </Button>
                </Upload>
                <Button 
                  icon={<ReloadOutlined />}
                  onClick={() => {
                    // Clear correct storage key and reload defaults
                    localStorage.removeItem('travel_tours_data');
                    // Also clear legacy key if present
                    localStorage.removeItem('tours');
                    forceRefresh();
                    message.success('ƒê√£ x√≥a d·ªØ li·ªáu b·ªô nh·ªõ tr√¨nh duy·ªát v√† l√†m m·ªõi!');
                  }}
                  size="large"
                >
                  L√†m m·ªõi d·ªØ li·ªáu
                </Button>
                <Button 
                  icon={<EyeOutlined />}
                  onClick={() => {
                    console.log('Current tours:', toursData);
                    console.log('LocalStorage tours:', TourDataManager.loadTours());
                    message.info(`Hi·ªán c√≥ ${toursData.length} tour trong h·ªá th·ªëng`);
                  }}
                  size="large"
                >
                  Ki·ªÉm tra d·ªØ li·ªáu
                </Button>
                <Button 
                  type="primary" 
                  icon={<PlusOutlined />}
                  onClick={handleAdd}
                  size="large"
                >
                  ‚ûï Th√™m tour m·ªõi
                </Button>
                <Button 
                  icon={<FileTextOutlined />}
                  onClick={() => {
                    // T·∫°o tour m·∫´u nhanh
                    const quickTour = {
                      slug: `tour-mau-${Date.now()}`,
                      title: 'Tour m·∫´u - Ch·ªânh s·ª≠a t√™n',
                      region: 'BinhDinh',
                      image: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?q=80&w=1400&auto=format&fit=crop',
                      price: 'Li√™n h·ªá',
                      duration: '1 ng√†y',
                      transport: 'Xe √¥ t√¥',
                      itinerary: [
                        {
                          time: dayjs('08:00', 'HH:mm'),
                          activity: 'Kh·ªüi h√†nh',
                          description: 'ƒê√≥n kh√°ch t·∫°i ƒëi·ªÉm h·∫πn'
                        },
                        {
                          time: dayjs('10:00', 'HH:mm'),
                          activity: 'Tham quan ƒëi·ªÉm ƒë·∫øn',
                          description: 'Kh√°m ph√° ƒë·ªãa ƒëi·ªÉm n·ªïi ti·∫øng'
                        },
                        {
                          time: dayjs('12:00', 'HH:mm'),
                          activity: 'ƒÇn tr∆∞a',
                          description: 'Th∆∞·ªüng th·ª©c ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng'
                        },
                        {
                          time: dayjs('14:00', 'HH:mm'),
                          activity: 'Ti·∫øp t·ª•c tham quan',
                          description: 'Kh√°m ph√° th√™m c√°c ƒëi·ªÉm ƒë·∫øn'
                        },
                        {
                          time: dayjs('16:00', 'HH:mm'),
                          activity: 'K·∫øt th√∫c tour',
                          description: 'Tr·ªü v·ªÅ ƒëi·ªÉm ƒë√≥n ban ƒë·∫ßu'
                        }
                      ],
                      includedServices: [
                        'Xe ƒë∆∞a ƒë√≥n',
                        'H∆∞·ªõng d·∫´n vi√™n',
                        'V√© v√†o c·ªïng',
                        'B·∫£o hi·ªÉm du l·ªãch'
                      ],
                      excludedServices: [
                        'ƒÇn u·ªëng',
                        'Chi ph√≠ c√° nh√¢n',
                        'Thu·∫ø VAT'
                      ],
                      policies: [
                        'Tr·∫ª em 0-4 tu·ªïi: Mi·ªÖn ph√≠',
                        'Tr·∫ª em 5-9 tu·ªïi: 50% gi√° v√©',
                        'Tr·∫ª em t·ª´ 10 tu·ªïi: 100% nh∆∞ ng∆∞·ªùi l·ªõn'
                      ]
                    };
                    
                    form.setFieldsValue(quickTour);
                    setIsModalVisible(true);
                    message.success('ƒê√£ t·∫°o tour m·∫´u! B·∫°n ch·ªâ c·∫ßn ch·ªânh s·ª≠a th√¥ng tin.');
                  }}
                  size="large"
                >
                  üöÄ T·∫°o tour m·∫´u nhanh
                </Button>
              </Space>
            </Col>
          </Row>
        </Header>
        
        <Content style={{ padding: '24px', background: '#f5f5f5' }}>
          <Card>
            <Table
              columns={columns}
              dataSource={toursData}
              rowKey="id"
              pagination={{
                pageSize: 10,
                showSizeChanger: true,
                showQuickJumper: true,
                showTotal: (total, range) => `${range[0]}-${range[1]} c·ªßa ${total} tour`,
              }}
            />
          </Card>
        </Content>
      </Layout>

      <Modal
        title={
          <div style={{ textAlign: 'center' }}>
            <Title level={3} style={{ margin: 0, color: '#1890ff' }}>
              {editingTour ? 'üìù Ch·ªânh s·ª≠a Tour' : '‚ûï Th√™m Tour M·ªõi'}
            </Title>
          </div>
        }
        open={isModalVisible}
        onCancel={() => {
          setIsModalVisible(false);
          form.resetFields();
        }}
        width={1000}
        style={{ top: 20 }}
        footer={[
          <Button key="cancel" onClick={() => setIsModalVisible(false)}>
            <CloseOutlined /> H·ªßy
          </Button>,
          <Button key="save" type="primary" onClick={handleSave}>
            <SaveOutlined /> {editingTour ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
          </Button>,
        ]}
      >
        <Form
          form={form}
          layout="vertical"
          initialValues={{
            region: 'BinhDinh',
          }}
        >
          <Divider orientation="left" style={{ color: '#1890ff', fontWeight: 'bold' }}>
            üìù Th√¥ng tin c∆° b·∫£n
          </Divider>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="title"
                label={<span style={{ fontWeight: 'bold', color: '#333' }}>üè∑Ô∏è T√™n tour</span>}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n tour!' }]}
              >
                <Input 
                  placeholder="VD: ƒê·∫£o L√Ω S∆°n 2N1ƒê" 
                  style={{ borderRadius: '6px' }}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="slug"
                label={<span style={{ fontWeight: 'bold', color: '#333' }}>üîó Slug (URL)</span>}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p slug!' }]}
              >
                <Input 
                  placeholder="dao-ly-son-2n1d" 
                  style={{ borderRadius: '6px' }}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="region"
                label={<span style={{ fontWeight: 'bold', color: '#333' }}>üó∫Ô∏è Khu v·ª±c</span>}
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn khu v·ª±c!' }]}
              >
                <Select style={{ borderRadius: '6px' }}>
                  <Option value="BinhDinh">B√¨nh ƒê·ªãnh</Option>
                  <Option value="MienTrungTayNguyen">Mi·ªÅn Trung & T√¢y Nguy√™n</Option>
                  <Option value="MienNam">Mi·ªÅn Nam</Option>
                  <Option value="MienBac">Mi·ªÅn B·∫Øc</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="duration"
                label={<span style={{ fontWeight: 'bold', color: '#333' }}>‚è±Ô∏è Th·ªùi gian</span>}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p th·ªùi gian!' }]}
              >
                <Input 
                  placeholder="VD: 2 ng√†y 1 ƒë√™m" 
                  style={{ borderRadius: '6px' }}
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="transport"
                label={<span style={{ fontWeight: 'bold', color: '#333' }}>üöó Ph∆∞∆°ng ti·ªán</span>}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ph∆∞∆°ng ti·ªán!' }]}
              >
                <Input 
                  placeholder="VD: √î t√¥ + M√°y bay" 
                  style={{ borderRadius: '6px' }}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="price"
                label={<span style={{ fontWeight: 'bold', color: '#333' }}>üí∞ Gi√° tour</span>}
              >
                <Input 
                  placeholder="VD: 1,500,000ƒë/kh√°ch (ƒë·ªÉ tr·ªëng n·∫øu li√™n h·ªá)" 
                  style={{ borderRadius: '6px' }}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="image"
                label={<span style={{ fontWeight: 'bold', color: '#333' }}>üñºÔ∏è H√¨nh ·∫£nh ch√≠nh</span>}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p URL h√¨nh ·∫£nh!' }]}
              >
                <Input 
                  placeholder="URL h√¨nh ·∫£nh ch√≠nh c·ªßa tour" 
                  style={{ borderRadius: '6px' }}
                />
              </Form.Item>
            </Col>
          </Row>

          <Divider orientation="left" style={{ color: '#1890ff', fontWeight: 'bold' }}>
            üìã L·ªãch tr√¨nh tour chi ti·∫øt
          </Divider>

          <Form.Item
            name="itinerary"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p l·ªãch tr√¨nh!' }]}
          >
            <Form.List name="itinerary">
              {(fields, { add, remove }) => (
                <>
                  {fields.map(({ key, name, ...restField }) => (
                    <Card 
                      key={key} 
                      size="small" 
                      style={{ 
                        marginBottom: 20, 
                        background: '#fafafa',
                        border: '1px solid #e6f7ff',
                        borderRadius: '8px'
                      }}
                      title={
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <span style={{ color: '#1890ff', fontWeight: 'bold' }}>
                            Ho·∫°t ƒë·ªông #{name + 1}
                          </span>
                          <Button 
                            type="text" 
                            danger 
                            size="small"
                            icon={<MinusCircleOutlined />} 
                            onClick={() => remove(name)}
                          >
                            X√≥a
                          </Button>
                        </div>
                      }
                    >
                     {/* Th√¥ng tin c∆° b·∫£n - ch·ªâ nh·ªØng tr∆∞·ªùng b·∫Øt bu·ªôc */}
                     <Row gutter={16}>
                       <Col span={6}>
                         <Form.Item
                           {...restField}
                           name={[name, 'time']}
                           label={<span style={{ fontWeight: 'bold', color: '#333' }}>‚è∞ Th·ªùi gian</span>}
                           rules={[{ required: true, message: 'Nh·∫≠p th·ªùi gian!' }]}
                         >
                           <TimePicker
                             format="HH:mm"
                             placeholder="Ch·ªçn th·ªùi gian"
                             style={{ width: '100%', borderRadius: '6px' }}
                           />
                         </Form.Item>
                       </Col>
                       <Col span={18}>
                         <Form.Item
                           {...restField}
                           name={[name, 'activity']}
                           label={<span style={{ fontWeight: 'bold', color: '#333' }}>üéØ Ho·∫°t ƒë·ªông</span>}
                           rules={[{ required: true, message: 'Nh·∫≠p ho·∫°t ƒë·ªông!' }]}
                         >
                           <Input
                             placeholder="VD: ƒÇn s√°ng, Tham quan ch√πa, Check-in..."
                             style={{ borderRadius: '6px' }}
                           />
                         </Form.Item>
                       </Col>
                     </Row>

                     {/* M√¥ t·∫£ chi ti·∫øt - t√πy ch·ªçn */}
                     <Form.Item
                       {...restField}
                       name={[name, 'description']}
                       label={<span style={{ fontWeight: 'bold', color: '#333' }}>üìù M√¥ t·∫£ chi ti·∫øt (t√πy ch·ªçn)</span>}
                     >
                       <TextArea
                         rows={2}
                         placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ ho·∫°t ƒë·ªông..."
                         style={{ borderRadius: '6px' }}
                       />
                     </Form.Item>

                     {/* H√¨nh ·∫£nh - t√πy ch·ªçn */}
                     <Form.Item
                       {...restField}
                       name={[name, 'images']}
                       label={<span style={{ fontWeight: 'bold', color: '#333' }}>üñºÔ∏è H√¨nh ·∫£nh (t√πy ch·ªçn - m·ªói d√≤ng 1 URL)</span>}
                     >
                       <TextArea
                         rows={2}
                         placeholder="URL h√¨nh ·∫£nh 1&#10;URL h√¨nh ·∫£nh 2"
                         style={{ borderRadius: '6px' }}
                       />
                     </Form.Item>

                     {/* C√°c tr∆∞·ªùng n√¢ng cao - c√≥ th·ªÉ ·∫©n/hi·ªán */}
                     <div style={{ marginTop: '16px', padding: '12px', background: '#f5f5f5', borderRadius: '8px' }}>
                       <Text style={{ fontSize: '12px', color: '#666', fontWeight: 'bold' }}>
                         üîß T√πy ch·ªçn n√¢ng cao (kh√¥ng b·∫Øt bu·ªôc)
                       </Text>
                       
                       <Row gutter={16} style={{ marginTop: '12px' }}>
                         <Col span={12}>
                           <Form.Item
                             {...restField}
                             name={[name, 'dayTitle']}
                             label={<span style={{ fontSize: '12px', color: '#666' }}>üìÖ Ti√™u ƒë·ªÅ ng√†y</span>}
                           >
                             <Input
                               placeholder="VD: NG√ÄY 1"
                               size="small"
                               style={{ borderRadius: '4px' }}
                             />
                           </Form.Item>
                         </Col>
                         <Col span={12}>
                           <Form.Item
                             {...restField}
                             name={[name, 'periodTitle']}
                             label={<span style={{ fontSize: '12px', color: '#666' }}>üåÖ Th·ªùi gian</span>}
                           >
                             <Input
                               placeholder="VD: S√°ng:, Chi·ªÅu:"
                               size="small"
                               style={{ borderRadius: '4px' }}
                             />
                           </Form.Item>
                         </Col>
                       </Row>

                       <Row gutter={16}>
                         <Col span={16}>
                           <Form.Item
                             {...restField}
                             name={[name, 'locationTitle']}
                             label={<span style={{ fontSize: '12px', color: '#666' }}>üìç ƒê·ªãa ƒëi·ªÉm</span>}
                           >
                             <Input
                               placeholder="VD: Th√°p ƒê√¥i:"
                               size="small"
                               style={{ borderRadius: '4px' }}
                             />
                           </Form.Item>
                         </Col>
                         <Col span={8}>
                           <Form.Item
                             {...restField}
                             name={[name, 'imageCaption']}
                             label={<span style={{ fontSize: '12px', color: '#666' }}>üí¨ Ch√∫ th√≠ch</span>}
                           >
                             <Input
                               placeholder="Ch√∫ th√≠ch h√¨nh ·∫£nh"
                               size="small"
                               style={{ borderRadius: '4px' }}
                             />
                           </Form.Item>
                         </Col>
                       </Row>
                     </div>
                    </Card>
                  ))}
                  
                  <Form.Item>
                    <Button
                      type="dashed"
                      onClick={() => add()}
                      block
                      icon={<PlusOutlined />}
                      style={{ 
                        height: '50px',
                        borderRadius: '8px',
                        border: '2px dashed #1890ff',
                        color: '#1890ff',
                        fontWeight: 'bold'
                      }}
                    >
                      ‚ûï Th√™m ho·∫°t ƒë·ªông m·ªõi
                    </Button>
                  </Form.Item>
                </>
              )}
            </Form.List>
          </Form.Item>

          <Divider orientation="left" style={{ color: '#1890ff', fontWeight: 'bold' }}>
            üíº D·ªãch v·ª• v√† ch√≠nh s√°ch
          </Divider>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="includedServices"
                label={<span style={{ fontWeight: 'bold', color: '#333' }}>‚úÖ D·ªãch v·ª• bao g·ªìm</span>}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p d·ªãch v·ª• bao g·ªìm!' }]}
              >
                <TextArea 
                  rows={5} 
                  placeholder="M·ªói d√≤ng l√† m·ªôt d·ªãch v·ª• ƒë∆∞·ª£c bao g·ªìm&#10;VD:&#10;- V√© tham quan c√°c ƒëi·ªÉm du l·ªãch&#10;- HDV chuy√™n nghi·ªáp&#10;- B·∫£o hi·ªÉm du l·ªãch"
                  style={{ borderRadius: '6px' }}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="excludedServices"
                label={<span style={{ fontWeight: 'bold', color: '#333' }}>‚ùå D·ªãch v·ª• kh√¥ng bao g·ªìm</span>}
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p d·ªãch v·ª• kh√¥ng bao g·ªìm!' }]}
              >
                <TextArea 
                  rows={5} 
                  placeholder="M·ªói d√≤ng l√† m·ªôt d·ªãch v·ª• kh√¥ng ƒë∆∞·ª£c bao g·ªìm&#10;VD:&#10;- V√© m√°y bay kh·ª© h·ªìi&#10;- Chi ph√≠ c√° nh√¢n&#10;- Thu·∫ø VAT"
                  style={{ borderRadius: '6px' }}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="policies"
            label={<span style={{ fontWeight: 'bold', color: '#333' }}>üìã Ch√≠nh s√°ch v√† ƒëi·ªÅu kho·∫£n</span>}
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ch√≠nh s√°ch!' }]}
          >
            <TextArea 
              rows={5} 
              placeholder="M·ªói d√≤ng l√† m·ªôt ƒëi·ªÅu kho·∫£n/ch√≠nh s√°ch&#10;VD:&#10;- Tr·∫ª em d∆∞·ªõi 5 tu·ªïi mi·ªÖn ph√≠&#10;- H·ªßy tour tr∆∞·ªõc 3 ng√†y ho√†n 100%&#10;- Th·ªùi ti·∫øt x·∫•u c√≥ th·ªÉ thay ƒë·ªïi l·ªãch tr√¨nh"
              style={{ borderRadius: '6px' }}
            />
          </Form.Item>

          <Form.Item
            name="gallery"
            label={<span style={{ fontWeight: 'bold', color: '#333' }}>üñºÔ∏è Th∆∞ vi·ªán h√¨nh ·∫£nh (t√πy ch·ªçn)</span>}
          >
            <TextArea 
              rows={3} 
              placeholder="M·ªói d√≤ng l√† m·ªôt URL h√¨nh ·∫£nh&#10;VD:&#10;https://example.com/image1.jpg&#10;https://example.com/image2.jpg"
              style={{ borderRadius: '6px' }}
            />
          </Form.Item>
        </Form>
      </Modal>
    </Layout>
  );
}
